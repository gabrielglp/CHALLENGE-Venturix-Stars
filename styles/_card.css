.container {
  width: 100vw;
  height: 100vh;
  display: flex;
  align-items: center;
  justify-content: center;
}

.card {
  background-color: var(--dark-blue);
  width: 88%;
  max-width: 40rem;
  border-radius: 1.5rem;
  padding: 2.5rem;
  /* acredito que a animation faz mais sentido
        se ficar no card. Assim, animamos apenas o que importa
    */
  animation: slideY 2s;
}

.star {
  background-color: var(--medium-grey);
  width: 4rem;
  height: 4rem;
  padding: 1.2rem;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
}

.star img {
  width: 1.4rem;
}

.titulo-h1 {
  font-size: 2.4rem;
  color: var(--white);
  margin-top: 1.9rem;
}

.texto {
  color: var(--light-grey);
  font-size: 1.4rem;
  line-height: 2.2rem;
  margin-top: 1.2rem;
}

.all-btn {
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: space-between;
}

.btn-div {
  color: var(--light-grey);
  font-size: 1.3rem;
  font-weight: 700;
  background-color: var(--medium-grey);
  width: 4.1rem;
  height: 4.1rem;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  margin-top: 2.5rem;
  /* Não sei se foi intencional, mas ao especificar na transition, qual a prop que estamos animando,
    aquele efeito do card "esticando" some.
    */
  transition: transform 0.8s;
  /* Os valores possíveis pro scale são sempre um number ou uma porcentagem

    https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/scale 
  */
  transform: translate(0) scale(1.3rem);
}

.btn-div div {
  transform: translateY(20%);
}

.btn-div:hover,
.btn-div:focus {
  background-color: var(--orange);
  color: var(--white);
  cursor: pointer;
  /* Cuidado com as animações. Elas costumam representar algo pro usuário também.
    Aqui, com o efeito de translateX, a impressão que pode passar é que ao clicar no button
    o usuário passaria pra uma próxima etapa.
  */
  transform: translateX(5px) scale(1);
}

.active {
  background-color: var(--light-grey);
}

.active div {
  color: var(--white);
}

.submit {
  background-color: var(--orange);
  display: flex;
  align-items: center;
  justify-content: center;
  text-transform: uppercase;
  color: var(--white);
  margin-top: 2.9rem;
  font-size: 1.5rem;
  padding: 1.31rem;
  border-radius: 4rem;
  letter-spacing: 0.1rem;
  transition: 0.8s;
  transition: transform 0.8s;
}

.submit:hover,
.submit:focus {
  background-color: var(--white);
  color: var(--orange);
  cursor: pointer;
  font-weight: 700;
  /* cuidado com as transitions também. Aqui talvez só um efeito smooth na troca de bg 
    Já deixaria elegante
  */
  transform: scale(1.05);
}

/* as vezes, pensando em usuários que utilizam de tecnologias assistivas
é legal termos mais informações sobre um determinado elemento.
Nesse caso, podemos usar uma classe 'sr-only' pra atingir esse objetivo.

https://webaim.org/techniques/css/invisiblecontent/
*/
.tooltip {
  color: var(--white);
  position: relative;
  top: 20px;
  padding: 0.1rem;
  background: rgb(15, 15, 15);
  display: flex;
  align-items: center;
  justify-content: center;
  text-align: center;
  font-size: 12px;
  border-radius: 4rem;
  visibility: hidden;
  opacity: 0;
  transition: all 0.5s ease-out;
}

.btn-submit:hover .tooltip {
  visibility: visible;
  bottom: 50px;
  opacity: 1;
}

/* o comportamento padrão do html já é de empilhar os elementos.
E pra centralizar, como temos apenas textos e uma imagem, podemos usar
text-align: center

https://stackoverflow.com/questions/10844205/html-5-strange-img-always-adds-3px-margin-at-bottom
*/
.card-2 {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.card-2 img {
  width: 14rem;
  margin-top: 1rem;
}

.result {
  background-color: var(--medium-grey);
  padding: 0.8rem 1.4rem;
  border-radius: 2rem;
  margin-top: 2.4rem;
  margin-bottom: 0.6rem;
}

.result div {
  color: var(--orange);
  font-size: 1.4rem;
}

.texto-p {
  color: var(--light-grey);
  font-size: 1.4rem;
  text-align: center;
  line-height: 2.2rem;
  margin-top: 1.2rem;
  margin-bottom: 1.5rem;
}

.ocult {
  display: none;
}

/* 
    Aqui eu inclui também a opacity.
    Acho que assim o efeito de transição pode ficar menos agressivo.
*/
@keyframes slideY {
  from {
    opacity: 0;
    transform: translateY(90px);
  }

  to {
    opacity: 1;
    transform: translateY(0px);
  }
}
